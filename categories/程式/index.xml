<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程式 on Random Forest</title>
    <link>https://chswei.github.io/categories/%E7%A8%8B%E5%BC%8F/</link>
    <description>Recent content in 程式 on Random Forest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2018</copyright>
    <lastBuildDate>Thu, 12 Jul 2018 22:36:43 +0800</lastBuildDate>
    
	<atom:link href="https://chswei.github.io/categories/%E7%A8%8B%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 GitHub 部署 Hugo 靜態網站</title>
      <link>https://chswei.github.io/programming/hugo/</link>
      <pubDate>Thu, 12 Jul 2018 22:36:43 +0800</pubDate>
      
      <guid>https://chswei.github.io/programming/hugo/</guid>
      <description>第一次搭建個人網站，選擇了 Hugo。儘管官方文件寫得很詳細，但 Programming 新手如我在建立的過程中還是遇到了一些困難，因此紀錄一下，希望能幫到跟我同樣情況的人。
以下分為兩部分介紹：本地建立檔案、部署到 GitHub。(使用 MacOS) (2018/09/01 補充 Windows 本地建立檔案方法在最下面)
第一部分：本地建立檔案 老實說 Hugo 真的很人性化，簡單幾個步驟就能讓使用者建立網站的雛形。
1. 打開 terminal，安裝 Homebrew /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; 2. 安裝 Hugo brew install hugo 3. 建立新網站 hugo new site website-hugo cd website-hugo website-hugo 可以替換成任意名稱，但你也可以跟我一樣，避免麻煩。找到名為 website-hugo 的資料夾，觀察一下內部資料夾結構。
4. 新增主題 (theme)：此處以 Casper 為例 git clone https://github.com/vjeantet/hugo-theme-casper themes/casper 你也可以選其他主題，進到該主題的 GitHub repo，將上面的網址改成 repo 的網址、themes/casper 改成 themes/你的主題名稱。
5. 將 /themes/casper 中的 static 和 layouts 資料夾複製，取代根目錄中的 static 和 layouts 資料夾 6.</description>
    </item>
    
    <item>
      <title>Python 中 sys.argv[] 配合 Shell Script 的使用方法</title>
      <link>https://chswei.github.io/programming/sysargv-shell/</link>
      <pubDate>Thu, 12 Jul 2018 22:25:02 +0800</pubDate>
      
      <guid>https://chswei.github.io/programming/sysargv-shell/</guid>
      <description>最近在寫李宏毅老師的 ML 課程作業時，第一次接觸了shell script，也終於弄懂 sys.argv[] 的用法。過程中看了網路上許多參考資料的介紹，總覺得對於我這個新手來說太過複雜，故在此稍作整理並紀錄。
第一步：建立含有 sys.argv[] 的 .py 文件 使用任意文字編輯器建立 .py 文件，如圖中的 test_code.py。
第二步：建立 .sh 文件 在 terminal 或 cmd 輸入以下指令：
touch shell_name touch 指令可以建立新的 .sh 文件，後面接你要的文件名稱，如圖中的 test_shell（注意這邊不用打副檔名 .sh）。
好的，到目前為止，資料夾中已有兩個檔案：test_code.py 和 test_shell.sh
接下來我們要在 test_shell.sh 中打一些東西：
#!/bin/bash python3 your_code.py $1...  #!/bin/bash 這行告訴系統以 bash（一種 shell）執行這個 .sh 檔。 python3 後面接要執行的 .py 文件，再後面接 $1、$2 … ，看你 .py 中 sys.argv[] 數字到多少就打到多少，因為 $1 之後會對應 sys.argv[1]、$2 會對應 sys.argv[2] … 以此類推。  第三步：傳遞參數 (passing arguments) 在 terminal 或 cmd 輸入以下指令：</description>
    </item>
    
    <item>
      <title>在 Jupyter Notebook 上安裝 R (Windows 10)</title>
      <link>https://chswei.github.io/programming/r-kernel-for-jupyter-notebook/</link>
      <pubDate>Thu, 12 Jul 2018 21:55:00 +0800</pubDate>
      
      <guid>https://chswei.github.io/programming/r-kernel-for-jupyter-notebook/</guid>
      <description>最近為了某個目的，想在 Jupyter Notebook 上寫 R code。利用 IRkernel 就能達到這件事，然而在安裝的過程中發生了一些問題，因此做了很多搜尋，將操作步驟整理在此，希望能幫助到一些人，同時也紀錄自己對於電腦世界的懵懂無知。
安裝 IRkernel 的前提 (Requirements)  安裝好 R （我的版本是 3.4.1，若還有安裝 RStudio 更好）。 安裝好 Jupyter Notebook （我是用 Anaconda 安裝的）。  此路不通 (Not Work for Me) 一開始我按照這個網站的步驟操作，在 Anaconda Prompt 內打入：
conda update anaconda conda install -c r r-essentials 在筆電和桌電上試驗都在第二步出現了 Error，沒辦法安裝，查了 google 和 stackoverflow 都找不到解答。（不過好多東西我都看不懂，所以也有可能是有解的。）之後還在 YouTube 看別人怎麼安裝，但對我來說還是不成功。
解法 (My Solution) 後來在某影片中的某片段看到一個似乎是 IRkernel 的官方網址，按照裡面的方法後，就安裝成功了！（心得：看官方文件還是最準的 OTZ）
Step 1 在 RStudio 的 Console 內打入：
install.packages(c(&amp;#39;repr&amp;#39;, &amp;#39;IRdisplay&amp;#39;, &amp;#39;evaluate&amp;#39;, &amp;#39;crayon&amp;#39;, &amp;#39;pbdZMQ&amp;#39;, &amp;#39;devtools&amp;#39;, &amp;#39;uuid&amp;#39;, &amp;#39;digest&amp;#39;)) devtools::install_github(&amp;#39;IRkernel/IRkernel&amp;#39;) Step 2 (Wrong) 在 RStudio 中的 Console 內打入：</description>
    </item>
    
  </channel>
</rss>