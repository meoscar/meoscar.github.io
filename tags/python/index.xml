<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Random Forest</title>
    <link>https://chswei.github.io/tags/python/</link>
    <description>Recent content in Python on Random Forest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2018</copyright>
    <lastBuildDate>Thu, 12 Jul 2018 22:25:02 +0800</lastBuildDate>
    
	<atom:link href="https://chswei.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python 中 sys.argv[] 配合 Shell Script 的使用方法</title>
      <link>https://chswei.github.io/post/programming/sysargv-shell/</link>
      <pubDate>Thu, 12 Jul 2018 22:25:02 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/programming/sysargv-shell/</guid>
      <description>最近在寫李宏毅老師的 ML 課程作業時，第一次接觸了shell script，也終於弄懂 sys.argv[] 的用法。過程中看了網路上許多參考資料的介紹，總覺得對於我這個新手來說太過複雜，故在此稍作整理並紀錄。
第一步：建立含有 sys.argv[] 的 .py 文件 使用任意文字編輯器建立 .py 文件，如圖中的 test_code.py。
第二步：建立 .sh 文件 在 terminal 或 cmd 輸入以下指令：
touch shell_name touch 指令可以建立新的 .sh 文件，後面接你要的文件名稱，如圖中的 test_shell（注意這邊不用打副檔名 .sh）。
好的，到目前為止，資料夾中已有兩個檔案：test_code.py 和 test_shell.sh
接下來我們要在 test_shell.sh 中打一些東西：
#!/bin/bash python3 your_code.py $1...  #!/bin/bash 這行告訴系統以 bash（一種 shell）執行這個 .sh 檔。 python3 後面接要執行的 .py 文件，再後面接 $1、$2 … ，看你 .py 中 sys.argv[] 數字到多少就打到多少，因為 $1 之後會對應 sys.argv[1]、$2 會對應 sys.argv[2] … 以此類推。  第三步：傳遞參數 (passing arguments) 在 terminal 或 cmd 輸入以下指令：</description>
    </item>
    
  </channel>
</rss>